// Code generated by ent, DO NOT EDIT.

package organization

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRevenues holds the string denoting the revenues field in the database.
	FieldRevenues = "revenues"
	// FieldSecurityScore holds the string denoting the security_score field in the database.
	FieldSecurityScore = "security_score"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeAudits holds the string denoting the audits edge name in mutations.
	EdgeAudits = "audits"
	// Table holds the table name of the organization in the database.
	Table = "organizations"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "org_id"
	// AuditsTable is the table that holds the audits relation/edge.
	AuditsTable = "audits"
	// AuditsInverseTable is the table name for the Audit entity.
	// It exists in this package in order to avoid circular dependency with the "audit" package.
	AuditsInverseTable = "audits"
	// AuditsColumn is the table column denoting the audits relation/edge.
	AuditsColumn = "org_id"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldRevenues,
	FieldSecurityScore,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// RevenuesValidator is a validator for the "revenues" field. It is called by the builders before save.
	RevenuesValidator func(float64) error
	// DefaultSecurityScore holds the default value on creation for the "security_score" field.
	DefaultSecurityScore float64
	// SecurityScoreValidator is a validator for the "security_score" field. It is called by the builders before save.
	SecurityScoreValidator func(float64) error
)
