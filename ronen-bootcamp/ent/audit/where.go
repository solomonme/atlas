// Code generated by ent, DO NOT EDIT.

package audit

import (
	"playground/ronen-bootcamp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Identity applies equality check predicate on the "identity" field. It's identical to IdentityEQ.
func Identity(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdentity), v))
	})
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgID), v))
	})
}

// IdentityEQ applies the EQ predicate on the "identity" field.
func IdentityEQ(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdentity), v))
	})
}

// IdentityNEQ applies the NEQ predicate on the "identity" field.
func IdentityNEQ(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdentity), v))
	})
}

// IdentityIn applies the In predicate on the "identity" field.
func IdentityIn(vs ...string) predicate.Audit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIdentity), v...))
	})
}

// IdentityNotIn applies the NotIn predicate on the "identity" field.
func IdentityNotIn(vs ...string) predicate.Audit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIdentity), v...))
	})
}

// IdentityGT applies the GT predicate on the "identity" field.
func IdentityGT(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIdentity), v))
	})
}

// IdentityGTE applies the GTE predicate on the "identity" field.
func IdentityGTE(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIdentity), v))
	})
}

// IdentityLT applies the LT predicate on the "identity" field.
func IdentityLT(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIdentity), v))
	})
}

// IdentityLTE applies the LTE predicate on the "identity" field.
func IdentityLTE(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIdentity), v))
	})
}

// IdentityContains applies the Contains predicate on the "identity" field.
func IdentityContains(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIdentity), v))
	})
}

// IdentityHasPrefix applies the HasPrefix predicate on the "identity" field.
func IdentityHasPrefix(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIdentity), v))
	})
}

// IdentityHasSuffix applies the HasSuffix predicate on the "identity" field.
func IdentityHasSuffix(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIdentity), v))
	})
}

// IdentityEqualFold applies the EqualFold predicate on the "identity" field.
func IdentityEqualFold(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIdentity), v))
	})
}

// IdentityContainsFold applies the ContainsFold predicate on the "identity" field.
func IdentityContainsFold(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIdentity), v))
	})
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimestamp), v))
	})
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Audit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimestamp), v...))
	})
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Audit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimestamp), v...))
	})
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimestamp), v))
	})
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimestamp), v))
	})
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimestamp), v))
	})
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimestamp), v))
	})
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalance), v))
	})
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.Audit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBalance), v...))
	})
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.Audit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBalance), v...))
	})
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalance), v))
	})
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalance), v))
	})
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalance), v))
	})
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalance), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Audit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Audit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgID), v))
	})
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v int) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrgID), v))
	})
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...int) predicate.Audit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrgID), v...))
	})
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...int) predicate.Audit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Audit(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrgID), v...))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganizations applies the HasEdge predicate on the "organizations" edge.
func HasOrganizations() predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrganizationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationsTable, OrganizationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationsWith applies the HasEdge predicate on the "organizations" edge with a given conditions (other predicates).
func HasOrganizationsWith(preds ...predicate.Organization) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrganizationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationsTable, OrganizationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Audit) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Audit) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Audit) predicate.Audit {
	return predicate.Audit(func(s *sql.Selector) {
		p(s.Not())
	})
}
