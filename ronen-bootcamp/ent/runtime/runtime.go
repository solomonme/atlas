// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"context"
	"playground/ronen-bootcamp/ent/audit"
	"playground/ronen-bootcamp/ent/organization"
	"playground/ronen-bootcamp/ent/schema"
	"playground/ronen-bootcamp/ent/user"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	audit.Policy = privacy.NewPolicies(schema.Audit{})
	audit.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := audit.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	auditFields := schema.Audit{}.Fields()
	_ = auditFields
	// auditDescTimestamp is the schema descriptor for timestamp field.
	auditDescTimestamp := auditFields[1].Descriptor()
	// audit.DefaultTimestamp holds the default value on creation for the timestamp field.
	audit.DefaultTimestamp = auditDescTimestamp.Default.(func() time.Time)
	// auditDescDescription is the schema descriptor for description field.
	auditDescDescription := auditFields[3].Descriptor()
	// audit.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	audit.DescriptionValidator = auditDescDescription.Validators[0].(func(string) error)
	organizationFields := schema.Organization{}.Fields()
	_ = organizationFields
	// organizationDescName is the schema descriptor for name field.
	organizationDescName := organizationFields[0].Descriptor()
	// organization.NameValidator is a validator for the "name" field. It is called by the builders before save.
	organization.NameValidator = organizationDescName.Validators[0].(func(string) error)
	// organizationDescRevenues is the schema descriptor for revenues field.
	organizationDescRevenues := organizationFields[1].Descriptor()
	// organization.RevenuesValidator is a validator for the "revenues" field. It is called by the builders before save.
	organization.RevenuesValidator = organizationDescRevenues.Validators[0].(func(float64) error)
	// organizationDescSecurityScore is the schema descriptor for security_score field.
	organizationDescSecurityScore := organizationFields[2].Descriptor()
	// organization.DefaultSecurityScore holds the default value on creation for the security_score field.
	organization.DefaultSecurityScore = organizationDescSecurityScore.Default.(float64)
	// organization.SecurityScoreValidator is a validator for the "security_score" field. It is called by the builders before save.
	organization.SecurityScoreValidator = func() func(float64) error {
		validators := organizationDescSecurityScore.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(security_score float64) error {
			for _, fn := range fns {
				if err := fn(security_score); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	user.Policy = privacy.NewPolicies(schema.User{})
	user.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := user.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
}

const (
	Version = "v0.11.3-0.20220907114911-2cdb627c0db2"           // Version of ent codegen.
	Sum     = "h1:5V8Ii8u9ESa6e1zkyynVqKlwSPT3s3F0zV21VwdXNMg=" // Sum of ent codegen.
)
