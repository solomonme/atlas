// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"playground/ronen-bootcamp/ent/audit"
	"playground/ronen-bootcamp/ent/organization"
	"playground/ronen-bootcamp/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Audit is the model entity for the Audit schema.
type Audit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Identity holds the value of the "identity" field.
	Identity string `json:"identity,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// OrgID holds the value of the "org_id" field.
	OrgID int `json:"org_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuditQuery when eager-loading is set.
	Edges       AuditEdges `json:"edges"`
	user_audits *int
}

// AuditEdges holds the relations/edges for other nodes in the graph.
type AuditEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Organizations holds the value of the organizations edge.
	Organizations *Organization `json:"organizations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuditEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OrganizationsOrErr returns the Organizations value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuditEdges) OrganizationsOrErr() (*Organization, error) {
	if e.loadedTypes[1] {
		if e.Organizations == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Organizations, nil
	}
	return nil, &NotLoadedError{edge: "organizations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Audit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case audit.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case audit.FieldID, audit.FieldOrgID:
			values[i] = new(sql.NullInt64)
		case audit.FieldIdentity, audit.FieldDescription:
			values[i] = new(sql.NullString)
		case audit.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case audit.ForeignKeys[0]: // user_audits
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Audit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Audit fields.
func (a *Audit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case audit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case audit.FieldIdentity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identity", values[i])
			} else if value.Valid {
				a.Identity = value.String
			}
		case audit.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				a.Timestamp = value.Time
			}
		case audit.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				a.Balance = value.Float64
			}
		case audit.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case audit.FieldOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				a.OrgID = int(value.Int64)
			}
		case audit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_audits", value)
			} else if value.Valid {
				a.user_audits = new(int)
				*a.user_audits = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Audit entity.
func (a *Audit) QueryUser() *UserQuery {
	return (&AuditClient{config: a.config}).QueryUser(a)
}

// QueryOrganizations queries the "organizations" edge of the Audit entity.
func (a *Audit) QueryOrganizations() *OrganizationQuery {
	return (&AuditClient{config: a.config}).QueryOrganizations(a)
}

// Update returns a builder for updating this Audit.
// Note that you need to call Audit.Unwrap() before calling this method if this Audit
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Audit) Update() *AuditUpdateOne {
	return (&AuditClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Audit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Audit) Unwrap() *Audit {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Audit is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Audit) String() string {
	var builder strings.Builder
	builder.WriteString("Audit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("identity=")
	builder.WriteString(a.Identity)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(a.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", a.Balance))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", a.OrgID))
	builder.WriteByte(')')
	return builder.String()
}

// Audits is a parsable slice of Audit.
type Audits []*Audit

func (a Audits) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
